/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/auth/callback': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['google_oauth_callback_handler'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/auth/login': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['google_login_handler'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/auth/logout': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['logout_handler'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/available_events': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['available_events'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/healthcheck': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['healthcheck'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/me': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['me'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/selected_events': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['selected_events'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/set_event': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations['set_event'];
		trace?: never;
	};
	'/sys_info': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['sys_info'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}

export type webhooks = Record<string, never>;

export interface components {
	schemas: {
		AvailableEvent: {
			/** Format: int64 */
			available_seats?: number | null;
			description: string;
			/** Format: int32 */
			id: number;
			name: string;
			room: string;
			/** Format: int64 */
			total_seats: number;
		};
		AvailableEventResponse: {
			events: components['schemas']['AvailableEvent'][];
		};
		BasicSystemInfo: {
			system_host_name: string;
			system_kernel_version: string;
			system_name: string;
			system_os_version: string;
		};
		CpuInfo: {
			brand: string;
			frequency: string;
			name: string;
			/** Format: float */
			usage: number;
			vendor_id: string;
		};
		MemInfo: {
			free: string;
			total: string;
			used: string;
		};
		SelectedEvent: {
			/** Format: date-time */
			date: string;
			description?: string | null;
			/** Format: int32 */
			id: number;
			name: string;
			room?: string | null;
			/**
			 * Format: int32
			 * @description The round of the event (0-indexed)
			 */
			round: number;
		};
		SelectedEventResponse: {
			events: components['schemas']['SelectedEvent'][];
		};
		SetEventRequest: {
			/**
			 * Format: int32
			 * @description The id of the event to set to, do not provide to set absent on that round
			 */
			event_id?: number | null;
			/**
			 * Format: int32
			 * @description The round to set the event to
			 */
			round: number;
		};
		SwapInfo: {
			free: string;
			total: string;
			used: string;
		};
		SystemInfoResponse: {
			basic: components['schemas']['BasicSystemInfo'];
			cpu_info: components['schemas']['CpuInfo'];
			memory: components['schemas']['MemInfo'];
			swap: components['schemas']['SwapInfo'];
		};
		User: {
			email: string;
			name?: string | null;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}

export type $defs = Record<string, never>;

export interface operations {
	google_oauth_callback_handler: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				code: string;
				state: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Redirect to Auth Success page, with a message in the reason query param */
			303: {
				headers: {
					/** @description Session cookie */
					'Set-Cookie'?: string;
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description csrf_state not found in session */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid CSRF state */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid email domain */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Failed to authenticate user */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	google_login_handler: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Redirect to Google OAuth */
			303: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	logout_handler: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successfully logged out */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Failed to logout user, user may be not logged in */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	available_events: {
		parameters: {
			query: {
				round: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns the available events */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AvailableEventResponse'];
				};
			};
			/** @description Not logged in */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	healthcheck: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'text/plain': string;
				};
			};
		};
	};
	me: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns the user's info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['User'];
				};
			};
			/** @description Not logged in */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	selected_events: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns the selected events */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['SelectedEventResponse'];
				};
			};
			/** @description Not logged in */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	set_event: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['SetEventRequest'];
			};
		};
		responses: {
			/** @description The event was set successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Not logged in */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	sys_info: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description System info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['SystemInfoResponse'];
				};
			};
		};
	};
}
